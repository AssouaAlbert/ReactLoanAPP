{"version":3,"sources":["components/Form.js","components/Results.js","components/Messages.js","components/Spinner.js","App.js","components/Help1.js","serviceWorker.js","index.js"],"names":["Form","state","amount","terms","handleChange","e","target","name","value","console","log","setState","parseInt","validateForm","checkValues","handleSubmit","preventDefault","props","loanInformation","onSubmit","this","onChange","id","className","type","placeholder","disabled","Component","Result","class","total","toFixed","Messages","Spinner","App","term","totalAmount","calculateTotal","loading","setTimeout","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2cb7c14e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n    state = { \r\n        amount: '',\r\n        terms: '',\r\n     };\r\n    handleChange = (e) => { //Default syntax of creating functions(event listeners in React)\r\n       // const name = e.target.value; //Another way...\r\n        const {name, value} = e.target; //Read the nae and value attribues of the target you can add the call and idif needed\r\n        console.log('value: ', value);\r\n        console.log('name: ', name);\r\n        //Here we set the state\r\n        this.setState({\r\n            [name]: parseInt(value),\r\n        })\r\n    }\r\n    validateForm = (e) => {\r\n        //pply destructuring\r\n        const {amount,terms} = this.state;\r\n        const checkValues = (amount>0 && terms)? false:true;\r\n        console.log('checkValues: ', checkValues);\r\n        return checkValues;\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"this: \", this); //This isjust for my understanding\r\n        console.log(\"e.target: \", e.target);//**This is different from 'this' */\r\n        //Reading the values from the state\r\n        const {amount, terms} = this.state;\r\n        this.props.loanInformation(amount,terms);\r\n\r\n    } \r\n    //The default way of passing events is using the onEvent...(Event can be Click, Submit)\r\n    render() { \r\n        return ( \r\n            <form onSubmit={this.handleSubmit}>\r\n                <div>\r\n                    <label>Amount</label>\r\n                    <input \r\n                    onChange={this.handleChange}\r\n                    id=\"name\" \r\n                    className=\"u-full-width\"\r\n                    name=\"amount\"\r\n                    type=\"number\"\r\n                    placeholder=\"E.g. 3000\"/>\r\n                </div>\r\n                <div>\r\n                    <label>Months to Replay</label>\r\n                    <select\r\n                    onChange={this.handleChange}\r\n                    name=\"terms\"\r\n                    className=\"u-full-width\">\r\n                        <option value=\"\">Select</option>\r\n                        <option value=\"3\">3 Months</option>\r\n                        <option value=\"6\">6 Months </option>\r\n                        <option value=\"12\">12 Months</option>\r\n                        <option value=\"24\">24 Months</option>\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    <input\r\n                    disabled ={this.validateForm()}\r\n                    type=\"submit\"\r\n                    value=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                    />\r\n                </div>\r\n            </form>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\n\r\nconst Result = (props) => {\r\n    return (\r\n        <div class=\"u-full-width result\">\r\n            <h2>Results</h2>\r\n            <p>Loan Amount= ${props.amount}</p>\r\n            <p>Months to Repay= {props.terms} Months</p>\r\n            <p>Total= ${props.total}</p>\r\n            <p>Monthly Payment= ${(props.total/props.terms).toFixed(2)}</p>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Result;","import React from 'react';\r\n\r\nconst Messages = (props) => {\r\n    return ( \r\n        <p>No Loan</p>\r\n     );\r\n}\r\n \r\nexport default Messages;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\n\r\nconst Spinner = (props) => {\r\n    return ( \r\n <div class=\"spinner\">\r\n<div class=\"double-bounce1\"></div>\r\n<div class=\"double-bounce2\"></div>\r\n</div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, { Component } from 'react';\nimport './normalize.css';\nimport './skeleton.css';\nimport Form from './components/Form';\nimport {calculateTotal} from \"./components/Help1.js\";\nimport Result from './components/Results';\nimport Messages from './components/Messages';\nimport Spinner from './components/Spinner';\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      total: '',\n      amount:'',\n      terms: '',\n      loading: false,\n    };\n  }\n  loanInformation = (amount,terms) => {\n    console.log('amount,terms: ', amount,terms);\n    console.log(\"I called the property\");\n    const total = calculateTotal(amount,terms);\n    this.setState({loading:true},()=>{setTimeout(() => {\n      this.setState({amount,total,terms,loading:false});\n    }, 3000);});\n    \n  }\n  render () {\n    const {total,amount,terms,loading} = this.state;\n    //Conditionally render a component\n    const component = (total==='' && !loading)?\n    <Messages/>:\n    (loading)? <Spinner/>:\n    <Result class=\"messages\"\n    total={total}\n    amount = {amount}\n    terms={terms}\n    />;\n    return (\n      <div>\n       <h1>Loan Calculator </h1>\n       <div className=\"container\">\n       <Form\n        loanInformation = {this.loanInformation}\n       />\n       <div className=\"messages\">\n        {component}\n       </div>\n       </div>\n      </div> \n    );\n  }\n}\n\nexport default App;\n","export function calculateTotal(amount, term){\r\n    //Calculate the total interest based on the months\r\n    /** Based on Amount\r\n     * 0-1000 === 25\r\n     * 1001-5000 === 20\r\n     * 50001-10000 === 15\r\n     * 10000> === 10\r\n     * Based on Months\r\n     * 3 Months=== 5%\r\n     * 6 Months=== 10%\r\n     * 12 Months=== 15%\r\n     * 24 Months=== 20%\r\n     */\r\n    let totalAmount;\r\n    totalAmount = (amount<=1000)?(amount + amount*.25):\r\n    (amount<=5000)? (amount + amount*.20):\r\n    (amount<=10000)?  (amount + amount*.15):(amount + amount*.10);\r\n    totalAmount += ((term==3)? amount*.05:(term==6)? amount*.1:(term==12)? amount*.15:amount*.2);\r\n    console.log('totalAmount: ', totalAmount);\r\n    return totalAmount;\r\n    \r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './components/Index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}